from cv2 import threshold
import requests
from rich.console import Console
from art import *
import re
from requests_html import HTMLSession
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin
from rich.table import Table
from pprint import pprint


console = Console()

class vulnerability_scanner():
    def __init__(vs):
        vs.target = ""
        vs.parsed_html_response = ""
        vs.all_forms = ""
        vs.state = ""
        vs.details_form = {}
        vs.email_regex = r"""(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])"""
        vs.sess = requests.Session()
        vs.sess.headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36"
        
        vs.scripts = ['<script>alert(document.cookie)</script>' , '"<Script>alert(hi)</scripT>"' ,
        '<script\x20type="text/javascript">javascript:alert(1);</script>' , 
        '</scrip</script>t><img src =q onerror=prompt(8)>' , '<script>javascript:alert(1)</script\x0B'
        ,'<BODY ONLOAD=javascript:alert(1)>']

        vs.sql_payload = ['-','"',"/","'",' ','&','^','*']

        vs.xss_arr = []
        vs.xss_arr_payload = []
        vs.email_arr = []
        vs.sql_arr = []

        vs.final_score = 0
        vs.report_message = []



        #xss tests
        vs.xss_is_vuln = 0 ## tested on function
        vs.xss_payload_count = 0
        vs.xss_forms_count = 0

        #sql test
        vs.sql_is_vuln = 0
        vs.sql_payload_count = 0

    @staticmethod
    def entry_message():
        art_font = text2art("Vulnerability Scanner",font='cybermedium',chr_ignore=True)
        console.print(f"[bold red]{art_font}[/bold red]")
        console.print("#" * 55, style="bold green")
        console.print("#"*12,"Advanced Network Scanner", "#"*12,style="dim cyan")
        console.print("#"*11,"Show you all devices that connected to the network", "#"*11,style="dim cyan")
        console.print("#" * 55, style="bold green")
        print()
        console.print("[+]For help press - H")
        console.print("[+]For XSS Scanner - 1")
        console.print("[+]For SQL Scanner- 2")
        console.print("[+]For Email Scanner - 3")

    def final_results(vs):
        test_cases = ["XSS VULNERABLE","XSS PAYLOADS","XSS FORMS","SQL VULNBERABLE","SQL PAYLOADS"]
        color_type = ""
        risk_type = ""
        if vs.final_score == 0:
            color_score = "green"
            risk_type = "Low"
        elif vs.final_score > 0 and vs.final_score < 6:
            color_score = "yellow"
            risk_type = "Medium"
        else:
            color_score = "red"
            risk_type = "High"

        art = text2art("Results",font='small',chr_ignore=True)
        print(art)

        console.print(f"[+] Your final secuirty score is:[{color_score}]{vs.final_score}[/{color_score}] Risk:[{color_score}]{risk_type}[/{color_score}]")
        print()
        console.print("[magenta]Test cases:[/magenta]")
        console.print("Secuirty tests:", style="bold blue")
        table = Table(show_header=True, header_style="bold green")
        table.add_column("TEST CASE", justify="left", style="cyan", no_wrap=True)
        table.add_column("STATUS", justify="left", style="cyan", no_wrap=True)
        table.add_column("SUCCESS", justify="left", style="red", no_wrap=True)

        for report,case in zip(vs.report_message,test_cases): ## need to add database with the vulnerability of the ports
            if ("below" or "not") in report.lower():
                success_type = "V"
                table.add_row(str(case), str(report), f"[green]{success_type}[/green]")
            else:
                success_type = "X"
                table.add_row(str(case), str(report), f"[red]{success_type}[/red]")
        console.print(table)


    def secruity_score(vs):
        threshold = 3
        if vs.xss_is_vuln == 1:
            vs.final_score = vs.final_score + 6
            vs.report_message.append("XSS Vulnerability found")
        else:
            vs.report_message.append("XSS Vulnerability not found")
        if vs.xss_payload_count > threshold:
            vs.final_score = vs.final_score + 3
            vs.report_message.append(f"XSS Payloads succeded over treshold, counter is :{vs.xss_arr_payload}")
        else:
            vs.report_message.append("XSS Payloads below the threshold")
        if vs.xss_forms_count > threshold:
            vs.final_score = vs.final_score + vs.xss_forms_count
            vs.report_message.append(f"XSS Vulnerable forms founds, the counter is : {vs.xss_forms_count}")
        else:
            vs.report_message.append("XSS Vulnerable forms below the threshold")
        if vs.sql_is_vuln == 1:
            vs.final_score = vs.final_score+6
            vs.report_message.append("SQL Injection vulnerability found")
        else:
            vs.report_message.append("SQL Vulnerability not found")
        if vs.sql_payload_count > threshold:
            vs.final_score = vs.final_score + 3
            vs.report_message.append("SQL Payloads succeded over treshold, counter is : {vs.sql_payload_count}")
        else:
            vs.report_message.append("SQL payloads below the threshold")

    def sql_payload_check(vs):
        if len(vs.sql_arr) > 0:
            vs.sql_payload_count = 1 
    def xss_forms_check(vs):
        if len(vs.xss_arr) > 0:
            vs.xss_forms_count = 1
    def xss_payload_check(vs):
        if len(vs.xss_arr_payload) > 0:
            vs.xss_payload_count = 1
    


    def find_emails(vs):
        session = HTMLSession()
        resp =  session.get(vs.target)
        resp.html.render()
        for re_match in re.finditer(vs.email_regex, resp.html.raw_html.decode()):
            print(re_match.group())
    
    def set_target(vs):
        print("Enter your target address : ")
        vs.target = input()
    
    def get_forms(vs):
        vs.parsed_html_response = requests.get(vs.target)
        vs.parsed_html_response = bs(vs.parsed_html_response.content, "html.parser")
        vs.all_forms = vs.parsed_html_response.find_all("form")
        #print(vs.all_forms)

    @staticmethod
    def parse_forms(form):
        details = {}
        action = form.attrs.get("action").lower()
        method = form.attrs.get("method", "get").lower()
        inputs = []
        for input_tag in form.find_all("input"):
            input_type = input_tag.attrs.get("type", "text")
            input_name = input_tag.attrs.get("name")
            input_value = input_tag.attrs.get("value", "")
            inputs.append({"type": input_type, "name": input_name, "value": input_value})
        details["action"] = action
        details["method"] = method
        details["inputs"] = inputs
        return details

    @staticmethod
    def submit_form(form_details, url, value):
        target_url = urljoin(url, form_details["action"])
        inputs = form_details["inputs"]

        data = {}
        for input in inputs:
            # replace all text and search values with `value`
            if input["type"] == "text" or input["type"] == "search":
                input["value"] = value

            input_name = input.get("name")
            input_value = input.get("value")

            if input_name and input_value:
                data[input_name] = input_value

        if form_details["method"] == "post": # check if post or get
            return requests.post(target_url, data=data)
        else:
            return requests.get(target_url, params=data)
            
    def scan_xss(vs):
        vs.get_forms()
        #print(f"[+] Detected {len(vs.all_forms)} forms on {vs.target}.")
        #script = "<Script>alert('hi')</scripT>"
        is_vulnerable = False
        for form in vs.all_forms:
            form_details = vs.parse_forms(form)
            for script in vs.scripts:
                content = vs.submit_form(form_details, vs.target, script).content.decode()
                if script in content:
                    #print(f"[+] XSS Detected on {vs.target}")
                    #print(f"[*] Form details:")
                    #pprint(form_details)
                    vs.xss_arr.append(form_details)
                    vs.xss_arr_payload.append(script)
                    is_vulnerable = True
                    vs.xss_is_vuln = 1 # test
        return is_vulnerable 

    def print_xss(vs):
        console.print(f"[+] Your target is:[bold red]{vs.target}[/bold red]")
        console.print(f"Total forms detected is:[bold red] {len(vs.xss_arr)} [/bold red]")
        console.print("The forms are :")

        for i in vs.xss_arr:
            pprint(i)
            print("--------------------------")
        console.print(f"Total forms are :[bold red] {len(vs.xss_arr_payload)} [/bold red]")
        console.print("The payloads are :")
        for j in vs.xss_arr_payload:
            print("[+] ",j)

    def print_sql(vs):
        for i in vs.sql_arr:
            pprint(i)
        

    @staticmethod
    def is_vulnerable(response):
        errors = {
            # MySQL
            "you have an error in your sql syntax;",
            "warning: mysql",
            # SQL Server
            "unclosed quotation mark after the character string",
            # Oracle
            "quoted string not properly terminated",
        }
        for error in errors:
            # if you find one of these errors, return True
            if error in response.content.decode().lower():
                return True
        # no error detected
        return False

    def scan_sql_injection(vs):
        # test on URL
        url = vs.target
        for c in vs.sql_payload:
            # add quote/double quote character to the URL
            new_url = f"{url}{c}"
            # make the HTTP request
            res = vs.sess.get(new_url)
            if vs.is_vulnerable(res):
                # SQL Injection detected on the URL itself, 
                # no need to preceed for extracting forms and submitting them
                print("[+] SQL Injection vulnerability detected, link:", new_url)
                vs.sql_arr.append(f"SQL Injection detected, the link is: {new_url} The payload is: {c}")
                vs.sql_is_vuln = 1
                #vs.sql_arr.append(form_details)
                #pprint(form_details)
        # test on HTML forms
        vs.get_forms()
        print(f"[+] Detected {len(vs.all_forms)} forms on {url}.")
        for form in vs.all_forms:
            form_details = vs.parse_forms(form)
            for c in vs.sql_payload:
                # the data body we want to submit
                data = {}
                for input_tag in form_details["inputs"]:
                    if input_tag["type"] == "hidden" or input_tag["value"]:
                        try:
                            data[input_tag["name"]] = input_tag["value"] + c
                        except:
                            pass
                    elif input_tag["type"] != "submit":
                        # all others except submit, use some junk data with special character
                        data[input_tag["name"]] = f"test{c}"
                # join the url with the action (form request URL)
                url = urljoin(url, form_details["action"])
                if form_details["method"] == "post":
                    res = vs.sess.post(url, data=data)
                elif form_details["method"] == "get":
                    res = vs.sess.get(url, params=data)
                # test whether the resulting page is vulnerable
                #print("is vuln = " + vs.is_vulnerable)
                if vs.is_vulnerable(res):
                    print("[+] SQL Injection vulnerability detected, link:", url)
                    #print("@@@@@@@@@@@@@@@@@@FORM = " + form_details)
                    #print("[+] Form:")
                    #print(form_details)
                    vs.sql_arr.append(form_details)
                    vs.sql_is_vuln = 1
                    #pprint(form_details)
                    #pprint(form_details)
                    #print(form_details['inputs']['value'])
                    break

    def init_main(vs):
        vs.entry_message()
        vs.state = console.input("Enter your option")
        if vs.state == "1":
            vs.set_target()
            vs.scan_xss()
            vs.xss_forms_check()
            vs.xss_payload_check()
            vs.secruity_score()
            vs.final_results()
            vs.print_xss()
        if vs.state == "2":
            vs.set_target()
            vs.scan_sql_injection()
            vs.sql_payload_check()
            vs.secruity_score()
            vs.final_results()
            vs.print_sql()
        #vs.find_emails()
        #vs.scan_sql_injection()
        #vs.print_sql()
#XSS TARGET = https://xss-game.appspot.com/level1/frame
#SQL TARGET = http://testphp.vulnweb.com/artists.php?artist=1

v = vulnerability_scanner()
v.init_main()